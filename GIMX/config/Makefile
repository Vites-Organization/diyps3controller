#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool                               #
#------------------------------------------------------------------------------#

prefix=$(DESTDIR)/usr
bindir=$(prefix)/bin

BINS=bin/Release/gimx-config

CC = gcc
CPP = g++
F77 = f77
F9X = gfortran
LD = g++
AR = ar
RANLIB = ranlib
WINDRES = windres

INC = -Iinclude -I/usr/include/libxml2 -I../../libsdl/include
CFLAGS = -Wall `wx-config --cflags` -Winvalid-pch -include wx_pch.h -DWX_PRECOMP
RESINC = 
RCFLAGS = 
LIBDIR =
LIB = -L../../libsdl/lib -lSDL -lxml2 `wx-config --libs`
LDFLAGS =

INC_RELEASE = $(INC)
CFLAGS_RELEASE = $(CFLAGS) -O2
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = -s $(LDFLAGS)
OBJDIR_RELEASE = obj/Release
DEP_RELEASE = 
OUT_RELEASE = bin/Release/gimx-config

OBJ_RELEASE = $(OBJDIR_RELEASE)/src/event_catcher.o $(OBJDIR_RELEASE)/src/XmlWritter.o $(OBJDIR_RELEASE)/src/XmlReader.o $(OBJDIR_RELEASE)/src/Trigger.o $(OBJDIR_RELEASE)/src/Intensity.o $(OBJDIR_RELEASE)/src/Event.o $(OBJDIR_RELEASE)/src/Device.o $(OBJDIR_RELEASE)/src/Controller.o $(OBJDIR_RELEASE)/src/ConfigurationFile.o $(OBJDIR_RELEASE)/src/Configuration.o $(OBJDIR_RELEASE)/src/ButtonMapper.o $(OBJDIR_RELEASE)/src/AxisMapper.o $(OBJDIR_RELEASE)/sixaxis_emu_guiMain.o $(OBJDIR_RELEASE)/sixaxis_emu_guiApp.o ../shared/updater/updater.o

all: release

clean: clean_release

release: $(OUT_RELEASE)

$(OUT_RELEASE): $(OBJ_RELEASE) $(DEP_RELEASE)
	test -d bin/Release || mkdir -p bin/Release
	$(LD) $(LDFLAGS_RELEASE) $(LIBDIR_RELEASE) -o $(OUT_RELEASE) $(OBJ_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/src/event_catcher.o: src/event_catcher.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/event_catcher.o src/event_catcher.cpp

$(OBJDIR_RELEASE)/src/XmlWritter.o: src/XmlWritter.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/XmlWritter.o src/XmlWritter.cpp

$(OBJDIR_RELEASE)/src/XmlReader.o: src/XmlReader.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/XmlReader.o src/XmlReader.cpp

$(OBJDIR_RELEASE)/src/Trigger.o: src/Trigger.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/Trigger.o src/Trigger.cpp

$(OBJDIR_RELEASE)/src/Intensity.o: src/Intensity.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/Intensity.o src/Intensity.cpp

$(OBJDIR_RELEASE)/src/Event.o: src/Event.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/Event.o src/Event.cpp

$(OBJDIR_RELEASE)/src/Device.o: src/Device.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/Device.o src/Device.cpp

$(OBJDIR_RELEASE)/src/Controller.o: src/Controller.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/Controller.o src/Controller.cpp

$(OBJDIR_RELEASE)/src/ConfigurationFile.o: src/ConfigurationFile.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/ConfigurationFile.o src/ConfigurationFile.cpp

$(OBJDIR_RELEASE)/src/Configuration.o: src/Configuration.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/Configuration.o src/Configuration.cpp

$(OBJDIR_RELEASE)/src/ButtonMapper.o: src/ButtonMapper.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/ButtonMapper.o src/ButtonMapper.cpp

$(OBJDIR_RELEASE)/src/AxisMapper.o: src/AxisMapper.cpp
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/src/AxisMapper.o src/AxisMapper.cpp

$(OBJDIR_RELEASE)/sixaxis_emu_guiMain.o: sixaxis_emu_guiMain.cpp
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/sixaxis_emu_guiMain.o sixaxis_emu_guiMain.cpp

$(OBJDIR_RELEASE)/sixaxis_emu_guiApp.o: sixaxis_emu_guiApp.cpp
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)
	$(CPP) $(CFLAGS_RELEASE) $(INC_RELEASE) -c -o $(OBJDIR_RELEASE)/sixaxis_emu_guiApp.o sixaxis_emu_guiApp.cpp

clean_release:
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)

.PHONY: clean clean_release

install: all
	mkdir -p $(prefix)
	mkdir -p $(bindir)
	mkdir -p $(prefix)/share/applications
	mkdir -p $(prefix)/share/pixmaps
	for i in $(BINS); do cp $$i $(bindir)/; done
	cp gimx-config.desktop $(prefix)/share/applications
	cp gimx-config.png $(prefix)/share/pixmaps

uninstall:
	-for i in $(BINS); do rm $(bindir)/$$i; done
	-rmdir $(bindir)
	-rmdir $(prefix)
	-rm $(prefix)/share/applications/gimx-config.desktop
	-rm $(prefix)/share/pixmaps/gimx-config.png

really-clean: clean uninstall
